// <auto-generated />
using System;
using CheckIT.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CheckIT.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190212214348_Changes_to_Table_Relationships")]
    partial class Changes_to_Table_Relationships
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CheckIT.API.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AptNum");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<bool>("DefaultAddress");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CheckIT.API.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AlertOn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOrdered");

                    b.Property<DateTime>("DateUnder");

                    b.Property<int>("IventoryId");

                    b.Property<int>("Threshold");

                    b.HasKey("Id");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("CheckIT.API.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName");

                    b.Property<int>("CustAddressID");

                    b.Property<int>("CustInvoiceID");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsCompany");

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("ID");

                    b.HasIndex("CustAddressID");

                    b.HasIndex("CustInvoiceID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CheckIT.API.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived");

                    b.Property<string>("Description");

                    b.Property<int>("InventoryAlertID");

                    b.Property<int>("InventoryLineID");

                    b.Property<int>("InventoryLocationID");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("Quantity");

                    b.Property<int>("UPC");

                    b.HasKey("Id");

                    b.HasIndex("InventoryAlertID");

                    b.HasIndex("InventoryLineID");

                    b.HasIndex("InventoryLocationID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("CheckIT.API.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("Money");

                    b.Property<bool>("IncomingInv");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<int>("InvoiceLineID");

                    b.Property<bool>("OutgoingInv");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceLineID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("CheckIT.API.Models.LineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<int>("QuantitySold");

                    b.HasKey("Id");

                    b.ToTable("LineItems");
                });

            modelBuilder.Entity("CheckIT.API.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CheckIT.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CheckIT.API.Models.Customer", b =>
                {
                    b.HasOne("CheckIT.API.Models.Address", "CustAddress")
                        .WithMany("Customers")
                        .HasForeignKey("CustAddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CheckIT.API.Models.Invoice", "CustInvoice")
                        .WithMany("InvoiceCustomerList")
                        .HasForeignKey("CustInvoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CheckIT.API.Models.Inventory", b =>
                {
                    b.HasOne("CheckIT.API.Models.Alert", "InventoryAlert")
                        .WithMany()
                        .HasForeignKey("InventoryAlertID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CheckIT.API.Models.LineItem", "InventoryLine")
                        .WithMany("Inventories")
                        .HasForeignKey("InventoryLineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CheckIT.API.Models.Location", "InventoryLocation")
                        .WithMany("InventoryLocList")
                        .HasForeignKey("InventoryLocationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CheckIT.API.Models.Invoice", b =>
                {
                    b.HasOne("CheckIT.API.Models.LineItem", "InvoiceLine")
                        .WithMany("Invoices")
                        .HasForeignKey("InvoiceLineID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
